<?php

namespace PictureArchiveBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use PictureArchiveBundle\Entity\MediaFile;

/**
 * FilesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaFileRepository extends EntityRepository
{
    /**
     * @param string $filepath
     * @return MediaFile|null
     * @throws NonUniqueResultException
     */
    public function findByFilepath($filepath): ?MediaFile
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT f FROM PictureArchiveBundle:MediaFile f WHERE f.path = :path'
            );
        $query->setParameter('path', $filepath);

        try {
            return $query->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     *
     * @throws \Doctrine\DBAL\DBALException
     */
    public function removeAll()
    {
        $connection = $this->getEntityManager()->getConnection();
        $connection->executeUpdate($connection->getDatabasePlatform()->getTruncateTableSQL('files'));
    }

    /**
     * @return ArrayCollection
     */
    public function findDuplicateHashes(): ArrayCollection
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $query = $qb->select('f.hash')
            ->from('PictureArchiveBundle:MediaFile', 'f')
            ->andWhere('f.status = :status')
            ->addGroupBy('f.hash')
            ->andHaving('count(f.hash) > 1')
            ->addOrderBy('f.mediaDate')
            ->setParameter(':status', MediaFile::STATUS_DUPLICATE)
            ->getQuery();

        $result = new ArrayCollection();

        try {
            foreach ($query->execute() as $data) {
                $result->offsetSet($data['hash'], $this->findByHash($data['hash']));
            }

        } catch (NoResultException $e) {
            // do nothing
        }
        return $result;
    }

    /**
     * @param string $hash
     * @return ArrayCollection
     */
    public function findByHash($hash): ArrayCollection
    {
        return new ArrayCollection($this->findBy(array('hash' => $hash)));
    }

    /**
     * @return int
     * @throws NonUniqueResultException
     * @throws NoResultException
     */
    public function countAll(): int
    {
        $query = $this->getEntityManager()->createQuery('SELECT COUNT(f.id) FROM PictureArchiveBundle:MediaFile f');

        return (int)$query->getSingleScalarResult();
    }

    /**
     * @return array
     */
    public function countByType(): array
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $query = $qb->select('f.mimeType, count(f.id) as amount')
            ->from('PictureArchiveBundle:MediaFile', 'f')
            ->addGroupBy('f.mimeType')
            ->addOrderBy('f.mimeType')
            ->getQuery();

        return $query->getArrayResult();
    }
}
